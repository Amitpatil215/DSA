/*
2360. Longest Cycle in a Graph

Question:
https://leetcode.com/contest/weekly-contest-304/problems/longest-cycle-in-a-graph/

Discuss
https://leetcode.com/problems/longest-cycle-in-a-graph/discuss/2357750/Simple-DFS-Traversal-or-Easy-Explanation-or-C%2B%2B

You are given a directed graph of n nodes numbered from 0 to n - 1, where each
node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n,
indicating that there is a directed edge from node i to node edges[i]. If there
is no outgoing edge from node i, then edges[i] == -1.

Return the length of the longest cycle in the graph. If no cycle exists, return
-1.

A cycle is a path that starts and ends at the same node.



Example 1:


Input: edges = [3,3,4,2,3]
Output: 3
Explanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.
The length of this cycle is 3, so 3 is returned.
Example 2:


Input: edges = [2,-1,3,1]
Output: -1
Explanation: There are no cycles in this graph.


Constraints:

n == edges.length
2 <= n <= 105
-1 <= edges[i] < n
edges[i] != i
 */

class Solution {
   public:
    int maxLen = -1;
    void dfs(vector<int>& edges, int src, vector<int>& currPath,
             vector<bool>& visited) {
        if (src == -1) return;

        // if alredy visited then find length
        int pos = -1;
        if (visited[src]) {
            for (int i = 0; i < currPath.size(); i++) {
                if (currPath[i] == src) {
                    pos = i;
                    break;
                }
            }
            if (pos == -1)
                return;
            else {
                int len = currPath.size() - pos;
                maxLen = max(maxLen, len);
                return;
            }
        }

        visited[src] = true;
        currPath.push_back(src);
        dfs(edges, edges[src], currPath, visited);
    }
    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        vector<bool> visited(n, false);
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                vector<int> currPath;
                dfs(edges, i, currPath, visited);
            }
        }
        return maxLen;
    }
};